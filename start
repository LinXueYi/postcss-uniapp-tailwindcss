#!/usr/bin/env node

let {
  existsSync, lstatSync, writeFileSync, readFileSync,
  mkdirSync, readdirSync, unlinkSync, renameSync, rmdirSync
} = require('fs')
let { basename, join, extname } = require('path')
let { exec } = require('child_process')

process.stdin.resume()
process.stdin.setEncoding('utf8')

let questionCallback = null
let lastQuestion = 0

process.stdin.on('data', text => {
  questionCallback(text.trim())
})

let noInstall = process.argv.includes('--no-install')
let useYarn = process.argv.includes('--yarn')

let questions = {
  LinXueYi: 'Your name: ',
  695126622@qq.com: 'Your email: ',
  LinXueYi: 'GitHub username: ',
  postcss-uniapp-tailwindcss: 'Plugin name: postcss-',
  use tailwindcss in uniapp: '\nFinish sentence with plugin description:\nPostCSS plugin ',
  ,
    "tailwindcss",
    "uniapp": '\nFinish plugin keywords:\npostcss, css, postcss-plugin, '
}
let autodetects = {
  LinXueYi: 'git config user.name',
  695126622@qq.com: 'git config user.email'
}
let answers = {
  2021: (new Date()).getFullYear()
}

function checkCwd () {
  if (process.cwd() === __dirname) {
    process.stderr.write(
      '\n' +
      'Please run this script from the directory above:\n' +
      'cd .. && ./' + basename(__dirname) + '/' + basename(__filename) + '\n'
    );
    process.exit(1);
  }
}

function copyFileSync (source, target) {
  let targetFile = target
  if (existsSync(target)) {
    if (lstatSync(target).isDirectory()) {
      targetFile = join(target, basename(source))
    }
  }
  writeFileSync(targetFile, readFileSync(source))
}

function copyFolderSync (source, target) {
  let files = []
  if (!existsSync(target)) mkdirSync(target)
  if (lstatSync(source).isDirectory()) {
    files = readdirSync(source)
    files.forEach(file => {
      let curSource = join(source, file)
      if (extname(file) == '.tpl') {
        file = file.split('.').slice(0, -1).join('.')
      }
      let targetFile = join(target, file)
      if (lstatSync(curSource).isDirectory()) {
        copyFolderSync(curSource, targetFile)
      } else {
        copyFileSync(curSource, target)
      }
    })
  }
}

function fillFiles (dir) {
  readdirSync(dir).forEach(file => {
    if (file === '.git') return

    let filepath = join(dir, file)
    if (lstatSync(filepath).isDirectory()) {
      fillFiles(filepath)
    } else {
      let content = readFileSync(filepath).toString()
      for (let code in answers) {
        while (content.includes(code)) {
          content = content.replace(code, answers[code])
        }
      }
      writeFileSync(filepath, content)
    }
  })
}

function cleanRepo (dir, callback) {
  let readme = join(dir, 'README.md')
  unlinkSync(readme)
  renameSync(readme + '.example', readme)
  unlinkSync(join(dir, 'start'))
  deleteFolderRecursive(join(dir, '.git'))
  callback()
}

function deleteFolderRecursive (dir) {
  if (existsSync(dir)) {
    readdirSync(dir).forEach(file => {
      let current = join(dir, file)
      if (lstatSync(current).isDirectory()) {
        deleteFolderRecursive(current)
      } else {
        unlinkSync(current)
      }
    })
    rmdirSync(dir)
  }
}

function initProject (dir, callback) {
  let command = 'cd "' + dir + '" && git init && '
  if (noInstall) {
    callback()
  } else {
    if (useYarn) {
      process.stdout.write('\nInstalling yarn packages...')
      command += 'yarn install'
    } else {
      process.stdout.write('\nInstalling npm packages...')
      command += 'npm install'
    }
    exec(command, callback)
  }
}

function autodetect (code, callback) {
  let command = autodetects[code]
  if (!command) {
    callback()
    return
  }

  try {
    exec(command, (_, stdout) => {
      let value = stdout.trim()
      if (value) {
        process.stdout.write(questions[code] + value + '\n')
        answers[code] = value
        lastQuestion += 1
        nextQuestion()
      } else {
        callback()
      }
    })
  } catch (error) {
    callback()
  }
}

function nextQuestion () {
  let code = Object.keys(questions)[lastQuestion]
  if (code) {
    autodetect(code, () => {
      process.stdout.write(questions[code])
      questionCallback = function (result) {
        if (result === '') {
          nextQuestion()
        } else {
          answers[code] = result
          lastQuestion += 1
          nextQuestion()
        }
      }
    })
  } else {
    answers.postcss-uniapp-tailwindcss = 'postcss-' + answers.postcss-uniapp-tailwindcss
    answers.PostCSS Uniapp Tailwindcss = answers.postcss-uniapp-tailwindcss
      .replace(/-\w/g, str => {
        return ' ' + str[1].toUpperCase()
      })
      .replace(/^postcss/, 'PostCSS')
    answers.,
    "tailwindcss",
    "uniapp" = ',\n    ' + answers.,
    "tailwindcss",
    "uniapp"
      .split(',')
      .map(i => {
        return '"' + i.trim() + '"'
      })
      .join(',\n    ')

    let dir = join(__dirname, '..', answers.postcss-uniapp-tailwindcss)
    let workflows = join(dir, '.github', 'workflows')
    copyFolderSync(__dirname, dir)
    fillFiles(dir)
    renameSync(join(dir, 'package.json.tpl'), join(dir, 'package.json'))
    mkdirSync(join(dir, '.github'))
    mkdirSync(workflows)
    renameSync(join(dir, 'test.yml'), join(workflows, 'test.yml'))
    cleanRepo(dir, () => {
      initProject(dir, () => {
        process.stdout.write(
          '\nDone. Remove this dir and continue work in ' +
          '../' + answers.postcss-uniapp-tailwindcss + '/\n'
        )
        process.exit(0)
      })
    })
  }
}

checkCwd()
nextQuestion()
